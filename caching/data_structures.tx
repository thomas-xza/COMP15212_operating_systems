
CACHE DATA STRUCTURE

empty:

[
        { -1: -1 },
        { -1: -1 },
        { -1: -1 },
        { -1: -1 },
        { -1: -1 }
]

----

CYCLIC

[
	{ mem_address: data },
	{ mem_address: data },
	{ mem_address: data },
	{ mem_address: data },
        { -1: -1 },		<- ds pointer
]

check_if_in_ds(
  ds list[dict[int]int], mem_addr int
  )
  -> (
  res bool, pos int
  )

push_to_ds(
  ds list[dict[int]int], ds_ptr, mem_addr, data int
  )
  -> (
  ds list[dict[int]int], ds_ptr int
  )

//  no other functions needed.

-----

LRU & MRU

[
	{ mem_address: data },  <-  most recently used at top, via prepends (and deletion if already in cache)
    	{ mem_address: data },
    	{ mem_address: data },
    	{ mem_address: data },
    	{ mem_address: data },	<-  least recently used falls to bottom
]

check_if_in_ds()

//  remove_from_ds() is used during cache hits (to rearrange), as well as during misses (to make space)

remove_from_ds(
  ds list[dict[int]int], pos int
  )
  -> (
  ds list[dict[int]int]
  )

prepend_to_ds(
  ds list[dict[int]int], mem_addr, data int
  ) -> (
  ds list[dict[int]int]
  )

-----

LFU

//  to maintain consistency with other cache types...

[
	{ mem_address: data },
	{ mem_address: data },   <-  lowest usage
	{ mem_address: data },
	{ mem_address: data },
	{ mem_address: data },
]

[
	access_quantity,
	access_quantity,         <-  lowest int
	access_quantity,
	access_quantity,
	access_quantity,
]

check_if_in_ds()

find_lowest_access_quantity(
  ds_hits list[int]
  )
  -> (
  pos int
  )
  
remove_from_ds()

prepend_to_ds()

-----